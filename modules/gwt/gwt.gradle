apply plugin: 'war'


configurations {
    gwtCompile
}

ext.gwtVersion = '2.8.2'
ext.gwtpVersion = '1.6'

dependencies {

    compile project(':echodata-service')

    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile "com.google.gwt:gwt-user:$gwtVersion",
            "com.google.gwt:gwt-dev:$gwtVersion",
            "com.gwtplatform:gwtp-mvp-client:$gwtpVersion",
            "com.gwtplatform:gwtp-dispatch-rpc-client:$gwtpVersion",
            "com.gwtplatform:gwtp-dispatch-rpc-server-spring:$gwtpVersion"


    gwtCompile "com.google.gwt:gwt-user:$gwtVersion",
            "com.google.gwt:gwt-dev:$gwtVersion",
            "com.gwtplatform:gwtp-mvp-client:$gwtpVersion",
            "com.gwtplatform:gwtp-dispatch-rpc-client:$gwtpVersion",
            "com.gwtplatform:gwtp-dispatch-rpc-server-spring:$gwtpVersion",
            'com.github.gwtbootstrap:gwt-bootstrap:2.3.2.0'

    compile 'com.github.gwtbootstrap:gwt-bootstrap:2.3.2.0'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/webapp'
        }
    }
}

ext.gwtBuildDir = "${project.buildDir}/gwt-build"


task compileGwt(dependsOn: classes, type: JavaExec) {

    classpath {
        [
                sourceSets.main.java.srcDirs,
                sourceSets.main.output.resourcesDir,
                sourceSets.main.output.classesDir
//                project(':echodata-service').sourceSets.main.java.srcDirs
        ] + configurations.gwtCompile
    }

    main = 'com.google.gwt.dev.Compiler'

    args =
            [
                    '-war', gwtBuildDir
            ]

    args('ru.dzhinn.echodata.gwt.EchoData')
//    args('ru.dzhinn.mail.web.gwt.Mail')

}


task gwtDevMode(type: JavaExec) {
    ext.gwtModules = [
            'ru.dzhinn.echodata.gwt.EchoData'
//            'ru.dzhinn.mail.web.gwt.Mail'
    ]

    main = 'com.google.gwt.dev.DevMode'

    classpath {
        [
                sourceSets.main.java.srcDirs,
                sourceSets.main.output.resourcesDir,
                sourceSets.main.output.classesDir
        ] + configurations.gwtCompile
    }

    def webappDir = new File(projectDir, 'src/main/webapp')

    args =
            [
//                    '-noserver',
//                    '-startupUrl',
//                    'http://localhost:8080/',
                    '-war', webappDir
            ]
    args(gwtModules)
}


task inplace << {
    List<File> webInfLibFiles = []
    configurations.compile.each { libFile ->
        if (!configurations.providedCompile.contains(libFile) && !configurations.providedRuntime.contains(libFile)) {
            webInfLibFiles.add(libFile)
        }
    }

    def webappDir = new File(projectDir, 'src/main/webapp')
    def classesDir = new File(webappDir, 'WEB-INF/classes')
    def libDir = new File(webappDir, 'WEB-INF/lib')
    classesDir.mkdir()
    libDir.mkdir()

    task copyLibs(type: Copy) {
        from webInfLibFiles
        into libDir
    }
    task copyClasses(type: Copy) {
        from sourceSets.main.output.classesDir
        from sourceSets.main.output.resourcesDir
        into classesDir
    }
    task copyGwt(type: Copy) {
        from gwtBuildDir
        into webappDir
    }

    copyLibs.execute()
    copyClasses.execute()
    copyGwt.execute()
}

clean.doLast {
    def webappDir = new File(projectDir, 'src/main/webapp')

    def unitCacheDir = new File(projectDir, 'gwt-unitCache')
    def classesDir = new File(webappDir, 'WEB-INF/classes')
    def libDir = new File(webappDir, 'WEB-INF/lib')
    def deployDir = new File(webappDir, 'WEB-INF/deploy')
    def moduleDir = new File(webappDir, 'echodata')
//    def adminModuleDir = new File(webappDir, 'admingwt')
    def manifest = new File(webappDir, 'META-INF/MANIFEST.MF')

    def dirsToRemove = [unitCacheDir, classesDir, libDir, deployDir, moduleDir, manifest];

    dirsToRemove.each { file ->
        if (file.exists()) {
            if (file.isDirectory()) {
                println "Deleting $file recursively..."
                file.deleteDir();
            } else {
                println "Deleting $file"
                file.delete();
            }
        }
    }
}
